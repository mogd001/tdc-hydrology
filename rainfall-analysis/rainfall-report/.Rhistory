df
df <- tabulate_hirds_data_string(hirds_data) %>%
filter("ARI" = 2)
df <- tabulate_hirds_data_string(hirds_data) %>%
filter("ARI" == 2)
df
df
df <- tabulate_hirds_data_string(hirds_data)
df
df[1]
df[2]
df[1]
df$ARI
df$`10 min`
df
filter(df, ARI == 2)
filter(df, ARI == 5)
df <- tabulate_hirds_data_string(hirds_data) %>%
select(`10 min`)
library(dplyr)
df <- tabulate_hirds_data_string(hirds_data) %>%
select(`10 min`)
df
df <- tabulate_hirds_data_string(hirds_data) %>%
filter("ARI" == 2) %>%
select(`10 min`)
df
df
df <- tabulate_hirds_data_string(hirds_data) %>%
filter("ARI" == 2)
df
df <- tabulate_hirds_data_string(hirds_data) %>%
filter(ARI == 2)
df
df <- tabulate_hirds_data_string(hirds_data) %>%
filter(ARI == 2) %>%
select(`10 min`)
df
df[1]
df[[1]]
envmon_site_information
endpoint <- "http://envdata.tasman.govt.nz/data.hts?"
site <- paste0("HY ", params$site)
measurement <- params$measurement
measurement
site
all_sites <- getHilltopSites(endpoint = endpoint)
s_filter <- as_vector(grepl(site, all_sites$site))
site_information <- all_sites %>%
filter(s_filter) %>%
rename_all(tolower)
envmon_site_information <- read_site_information(site)
read_site_information <- function(site_name) {
# Function to read site information to populate rainfall report
envmon_string <- "driver={SQL Server};server=TSRVSQL14;database=ENVMON;trusted_connection=true"
envmon <- odbcDriverConnect(envmon_string)
site_name_wrapped <- paste0("\'", site_name, "\'")
site_information <- sqlQuery(envmon, paste0(
"SELECT SiteID, Name, Easting, Northing, AuxName1, AuxName2, CatchmentArea, HIRDS
FROM Site",
" WHERE Name LIKE ",
site_name_wrapped), stringsAsFactors = FALSE) %>%
rename(
site_id = SiteID,
site_name = Name,
easting = Easting,
northing = Northing,
first_synonym = AuxName1,
second_synonym = AuxName2,
catchment_area = CatchmentArea,
hirds_data = HIRDS
)
# Close db connection
odbcClose(envmon)
return(site_information)
}
envmon_site_information <- read_site_information(site)
library(tidyverse)
library(lubridate)
library(hillr)
library(plotly)
library(RODBC)
library(scales)
envmon_site_information <- read_site_information(site)
# Need to replace with actual data
catchment <- "Anatoki"
envmon_site_information
envmon_site_information$hirds_data
hirds_table <- tabulate_hirds_data_string(envmon_site_information$hirds_data)
hirds_table
site_information <- sqlQuery(envmon, paste0(
"SELECT SiteID, Name, Easting, Northing, AuxName1, AuxName2, CatchmentArea, HIRDS
FROM Site",
" WHERE Name LIKE ",
site_name_wrapped), stringsAsFactors = FALSE) %>%
rename(
site_id = SiteID,
site_name = Name,
easting = Easting,
northing = Northing,
first_synonym = AuxName1,
second_synonym = AuxName2,
catchment_area = CatchmentArea,
hirds_data = HIRDS
)
hirds_table <- tabulate_hirds_data_string(envmon_site_information$hirds_data)
test_string <- "1.58,8.77,14.7,19.7,32.3,51.4,99.2,141,188,234,257\r\n2,9.63,16.1,21.6,35.3,56.2,108,154,205,255,280\r\n5,12.6,21,28.2,46,72.9,140,198,264,327,357\r\n10,14.9,24.7,33.2,53.9,85.3,163,231,307,379,414\r\n20,17.2,28.6,38.3,62.2,98.2,187,264,351,433,472\r\n30,18.6,30.9,41.4,67.1,106,202,284,377,465,507\r\n40,19.7,32.6,43.7,70.7,112,212,299,396,488,532\r\n50,20.5,34,45.4,73.6,116,221,310,410,506,551\r\n60,21.2,35.1,46.9,75.9,120,227,320,423,521,567\r\n80,22.3,36.8,49.2,79.6,125,238,334,442,544,592\r\n100,23.1,38.2,51,82.5,130,246,346,457,562,611\r\n"
hirds_table <- tabulate_hirds_data_string(test_string)
tabulate_hirds_data_string <- function(data_string) {
# Function to map HIRDS string saved in ENVMON database to tabular form
col_names <- c("ARI", "10 min", "20 min", "30 min", "1 hour", "2 hour", "6 hour", "12 hour", "1 day", "2 day", "3 day", "4 day", "5 day")
# Split string according to \r\n rows, then convert rows to double and create dataframe
rows <- strsplit(data_string, "\r\n")[[1]]
n_col <- 0
for (row in rows) {
x <- as.double(unlist(strsplit(row, ",")))
if (n_col == 0) {
n_col <- length(x)
v <- x
} else {
v <- append(v, x)
}
}
m <- t(matrix(v, ncol = n_col))
# add empty columns to m
for (i in 1:(length(col_names) - n_col)) {
m <- cbind(m, rep(NA, length(m[,1])))
}
hirds_df <- as_tibble(m)
names(hirds_df) <- col_names
return(hirds_df)
}
hirds_table <- tabulate_hirds_data_string(test_string)
library(tidyverse)
library(lubridate)
library(hillr)
library(plotly)
library(RODBC)
library(scales)
hirds_table <- tabulate_hirds_data_string(test_string)
hirds_table
hirds_table <- tabulate_hirds_data_string(test_string) %>%
flter(ARI, `1 hour`, `6 hour`, `1 day`)
hirds_table <- tabulate_hirds_data_string(test_string) %>%
filter(ARI, `1 hour`, `6 hour`, `1 day`)
hirds_table <- tabulate_hirds_data_string(test_string)
hirds_table <- tabulate_hirds_data_string(test_string) %>%
filter(ARI, `1 hour`, `6 hour`, `1 day`)
hirds_table <- tabulate_hirds_data_string(test_string) %>%
filter(ARI)
hirds_table <- tabulate_hirds_data_string(test_string) %>%
select(ARI, `1 hour`, `6 hour`, `1 day`)
hird_table
hirds_table
hirds_table <- tabulate_hirds_data_string(test_string) %>%
select(ARI, `1 hour`, `6 hour`, `1 day`) %>%
rename(Period = ARI, `1 hr` = `1 hour`, `6 hour` = `6 hr`, ` 1 day` = `24 hr`)
hirds_table <- tabulate_hirds_data_string(test_string) %>%
select(ARI, `1 hour`, `6 hour`, `1 day`) %>%
rename(Period = ARI, `1 hr` = `1 hour`, `6 hour` = `6 hour`, `24 hr` = `1 day`)
hirds_table
hirds_table <- tabulate_hirds_data_string(test_string) %>%
select(ARI, `1 hour`, `6 hour`, `1 day`) %>%
filter(ARI %in% c(2, 5, 10, 20, 50, 100))
rename(Period = ARI, `1 hr` = `1 hour`, `6 hour` = `6 hour`, `24 hr` = `1 day`)
hirds_table <- tabulate_hirds_data_string(test_string)
hirds_table <- tabulate_hirds_data_string(test_string) %>%
select(ARI, `1 hour`, `6 hour`, `1 day`)
hirds_table <- tabulate_hirds_data_string(test_string) %>%
select(ARI, `1 hour`, `6 hour`, `1 day`) %>%
filter(ARI %in% c(2, 5, 10, 20, 50, 100))
hirds_table <- tabulate_hirds_data_string(test_string) %>%
select(ARI, `1 hour`, `6 hour`, `1 day`) %>%
filter(ARI %in% c(2, 5, 10, 20, 50, 100)) %>%
rename(Period = ARI, `1 hr` = `1 hour`, `6 hour` = `6 hour`, `24 hr` = `1 day`)
hirds_table
hirds_table$Period
hirds_table$Period + " year"
as.string(hirds_table$Period) + " year"
lapply(hirds_table$Period, as.character())
lapply(hirds_table$Period, as.character
lapply(hirds_table$Period, as.character)
lapply(hirds_table$Period, as.character)
hirds_table$Period
sapply(hirds_table$Period, as.character)
modify_period <- function(period) {
reutrn(paste0(as.character(period, " year")))
}
modify_period <- function(period) {
return(paste0(as.character(period, " year")))
}
sapply(hirds_table$Period, modify_period)
modify_period <- function(period) {
return(paste0(as.character(period), " year"))
}
sapply(hirds_table$Period, modify_period)
hirds_table <- tabulate_hirds_data_string(envmon_site_information$hirds_data) %>%
select(ARI, `1 hour`, `6 hour`, `1 day`) %>%
filter(ARI %in% c(2, 5, 10, 20, 50, 100)) %>%
rename(Period = ARI, `1 hr` = `1 hour`, `6 hour` = `6 hour`, `24 hr` = `1 day`)
# Modify period for table output
modify_period <- function(period) {
return(paste0(as.character(period), " year"))
}
hirds_table$Period <- sapply(hirds_table$Period, modify_period)
hirds_table
end_date
# Load data
end_date <- floor_date(now(), "1 hour")
end_date
site
site <- paste0("HY ", params$site)
site
strsplit(site, " ")
catchment <- strsplit(site, " ")[2]
catchment
strsplit(site, " ")[2]
strsplit(site, " ")
strsplit(site, " ")[[1]]
strsplit(site, " ")[[1]][1]
strsplit(site, " ")[[1]][2]
catchment <- unlist(strsplit(site, " "))[2]
catchment
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
endpoint
endpoint <- "http://envdata.tasman.govt.nz/data.hts?"
endpoint
endpoint <- "http://envdata.tasman.govt.nz/data.hts?"
site <- paste0("HY ", params$site)
site
# Get site information and prepare data
all_sites <- getHilltopSites(endpoint = endpoint)
s_filter <- as_vector(grepl(site, all_sites$site))
site_information <- all_sites %>%
filter(s_filter) %>%
rename_all(tolower)
s_filter
site_information
envmon_site_information <- read_site_information(site)
source("rainfall_functions.R")
site
library(tidyverse)
library(lubridate)
library(hillr)
library(plotly)
library(RODBC)
library(scales)
envmon_site_information <- read_site_information(site)
envmon_site_information
site
site <- params$site
envmon_site_information <- read_site_information(site)
envmon_site_information
install.packages("pkgdown")
endpoint <- "http://envdata.tasman.govt.nz/data.hts?"
site <- params$site
measurement <- params$measurement
envmon_site_information <- read_site_information(site)
source("rainfall_functions.R")
envmon_site_information <- read_site_information(site)
library(tidyverse)
library(lubridate)
library(hillr)
library(plotly)
library(RODBC)
library(scales)
envmon_site_information <- read_site_information(site)
source("C:/Users/matto/OneDrive - Tasman District Council/Desktop/R/Rainfall-Summary-Analysis/rainfall-report/rainfall_functions.R", echo=TRUE)
rmarkdown::render(
"rainfall_report.Rmd",
output_file = paste(
"outputs/rainfall_report",
Sys.Date(),
".",
site,
".html",
sep = ""
)
)
library(rmarkdown)
site <- "HY Aorere at Salisbury Br"
rmarkdown::render(
"rainfall_report.Rmd",
output_file = paste(
"outputs/rainfall_report",
Sys.Date(),
".",
site,
".html",
sep = ""
)
)
library(rmarkdown)
site <- "HY Aorere at Salisbury Br"
rmarkdown::render(
"rainfall_report.Rmd",
output_file = paste(
"outputs/rainfall_report.",
Sys.Date(),
".",
site,
".html",
sep = ""
)
)
site <- "HY Aorere at Salisbury Br"
url <- "http://envdata.tasman.govt.nz/data.hts?Service=Hilltop&Request=EnsembleStats&&Site=HY Anatoki at Happy Sams&Measurement=Rainfall&Statistic=ExtremeHourlyMean"
xml <- hillr::hillXmlParse(url)
"http://envdata.tasman.govt.nz/data.hts?Service=Hilltop&Request=EnsembleStats&&Site=HY Anatoki at Happy Sams&Measurement=Rainfall&Statistic=ExtremeHourlyMean"
url <- "http://envdata.tasman.govt.nz/data.hts?Service=Hilltop&Request=EnsembleStats&&Site=HY Anatoki at Happy Sams&Measurement=Rainfall&Statistic=ExtremeHourlyMean"
xml <- hillr::hillXmlParse(url)
xml
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
library(XML)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
library(xml2)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
library(httr)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
url <- "http://envdata.tasman.govt.nz/data.hts?Service=Hilltop&Request=EnsembleStats&&Site=HY Anatoki at Happy Sams&Measurement=Rainfall&Statistic=ExtremeHourlyMean"
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
library(XML)
library(xml2)
library(httr)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
url <- "http://envdata.tasman.govt.nz/data.hts?Service=Hilltop&Request=EnsembleStats&&Site=HY Anatoki at Happy Sams&Measurement=Rainfall&Statistic=ExtremeHourlyMean"
url <- r"{http://envdata.tasman.govt.nz/data.hts?Service=Hilltop&Request=EnsembleStats&&Site=HY Anatoki at Happy Sams&Measurement=Rainfall&Statistic=ExtremeHourlyMean}"
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
Get(url)
library(Hilltop)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
site <- "HY Anatoki at Happy Sams"
measurement<- "rainfall"
url <-
paste0(
endpoint,
"Service=Hilltop&Request=GetData&Site=",
gsub(" ", "%20", site),
"&Measurement=",
gsub(" ", "%20", measurement),
"&Statistic=ExtremeHourlyMean"
)
url
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
as_tibble(as_list(read_xml(GET(url))))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop")
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop) %>%
unnest(cols = names(.))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
url
url <-
paste0(
endpoint,
"Service=Hilltop&Request=GetData&Site=",
gsub(" ", "%20", site),
"&Measurement=",
gsub(" ", "%20", measurement),
"&Statistic=HourlyExtrema"
)
url
url <-
paste0(
endpoint,
"Service=Hilltop&Request=GetData&Site=",
gsub(" ", "%20", site),
"&Measurement=",
gsub(" ", "%20", measurement),
"&Statistic=MeanHourlyExtrema"
)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
url <-
paste0(
endpoint,
"Service=Hilltop&Request=GetData&Site=",
gsub(" ", "%20", site),
"&Measurement=",
gsub(" ", "%20", measurement),
"&Statistic=MeanHourlyExtrema"
)
url
url <-
paste0(
endpoint,
"Service=Hilltop&Request=GetData&Site=",
gsub(" ", "%20", site),
"&Measurement=",
gsub(" ", "%20", measurement),
"&Statistic=ExtremeHourlyMean"
)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop)
measurement
site
url <-
paste0(
endpoint,
"Service=Hilltop&Request=GetData&Site=",
gsub(" ", "%20", site),
"&Measurement=",
gsub(" ", "%20", measurement),
"&Statistic=ExtremeHourlyMean"
)
url
url <-
paste0(
endpoint,
"Service=Hilltop&&Request=EnsembleStats&Site=",
gsub(" ", "%20", site),
"&Measurement=",
gsub(" ", "%20", measurement),
"&Statistic=ExtremeHourlyMean"
)
url
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("Hilltop") %>%
filter(Hilltop_id == "Data") %>%
select(Hilltop) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
as_tibble(as_list(read_xml(GET(url))))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer") %>%
filter(HilltopServer_id == "Max") %>%
select(Hilltop) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer") %>%
filter(HilltopServer_id == "Max")
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer") %>%
filter(HilltopServer_id == "Max") %>%
select(HilltopServer)
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer") %>%
filter(HilltopServer_id == "Max") %>%
select(HilltopServer) %>%
unnest(cols = names(.))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer") %>%
filter(HilltopServer_id == "Max") %>%
select(HilltopServer) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
