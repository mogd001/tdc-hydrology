style_buttons <- lapply(styles, function(s) {
list(
label = s,
method = "relayout",
args = list("mapbox.style", s)
)
})
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
),
mapbox = list(style = "basic",
center = list(lat = ~median(lat), lon = ~median(long)),
zoom = 7.8),
)
save_html(p, file = "outputs/rainfall_summary.html")
library(tidyverse)
library(hillr)
library(XML)
library(rvest)
library(lubridate)
library(plotly)
library(htmltools)
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoibWF0dG9nZGVuIiwiYSI6ImNsNDNjY21jNDAxZmYzb3A4NWE2Y2M2cXEifQ.4vG7Zx9grk1z7R9LsDPeEA')
datatables_fp <- r"{\\tsrvfiles\hydrology\Datafiles\Data Tables}"
# Load RainHour
rain_hour <- "RainHour.htm"
latest_hr <- floor_date(now(), "1 hour")
x = c()
for (i in 0:23) {
x <- append(x, format(latest_hr - hours(i), format = "%H:%M"))
}
header = append(c("sitename", "total"), rev(x))
rain_hr_df <- read_html(paste0(datatables_fp, "\\", rain_hour)) %>%
html_table(fill = TRUE, header = FALSE) %>%
first()
names(rain_hr_df) <- header
# site_measurements.rds produced in Site-Analysis
sites_measurements <- readRDS(file = "data/sites_measurements.rds")
sites_measurements
rainfall_sites <- sites_measurements %>%
filter(measurementname == "Rainfall") %>%
mutate(sitename = substring(site, 4)) %>%
left_join(rain_hr_df, by = "sitename") %>%
drop_na(total)
styles <- schema()$layout$layoutAttributes$mapbox$style$values
style_buttons <- lapply(styles, function(s) {
list(
label = s,
method = "relayout",
args = list("mapbox.style", s)
)
})
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
),
mapbox = list(style = "basic",
center = list(lat = ~median(lat), lon = ~median(long)),
zoom = 7.8),
)
save_html(p, file = "outputs/rainfall_summary.html")
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
),
mapbox = list(style = "basic",
center = list(lat = ~median(lat), lon = ~median(long)),
zoom = 7.8),
)
rainfall_sites
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
),
mapbox = list(style = "basic",
center = list(lat = ~median(lat), lon = ~median(long)),
zoom = 7.8),
)
rainfall_sites
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
),
mapbox = list(style = "basic",
center = list(lat = ~median(lat), lon = ~median(long)),
zoom = 7.8),
)
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
)
)
save_html(p, file = "outputs/rainfall_summary.html")
save_html(p, file = "outputs/rainfall_summary.html")
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
),
mapbox = list(style = "basic",
center = list(lat = ~median(lat), lon = ~median(long)),
zoom = 7.8),
)
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
),
mapbox = list(style = "basic",
center = list(lat = ~median(lat), lon = ~median(long)),
zoom = 7.8)
)
save_html(p, file = "outputs/rainfall_summary.html")
??layout
library(tidyverse)
library(hillr)
library(XML)
library(rvest)
library(lubridate)
library(plotly)
library(htmltools)
################################################################################
#
# Title: Rainfall Map Summary
# Author: Matt Ogden
# Description: This script joins the rainfall summary data and creates a map output,
# showing the total rainfall at the various rainfall sites.
#
################################################################################
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoibWF0dG9nZGVuIiwiYSI6ImNsNDNjY21jNDAxZmYzb3A4NWE2Y2M2cXEifQ.4vG7Zx9grk1z7R9LsDPeEA')
datatables_fp <- r"{\\tsrvfiles\hydrology\Datafiles\Data Tables}"
# Load RainHour
rain_hour <- "RainHour.htm"
latest_hr <- floor_date(now(), "1 hour")
x = c()
for (i in 0:23) {
x <- append(x, format(latest_hr - hours(i), format = "%H:%M"))
}
header = append(c("sitename", "total"), rev(x))
rain_hr_df <- read_html(paste0(datatables_fp, "\\", rain_hour)) %>%
html_table(fill = TRUE, header = FALSE) %>%
first()
names(rain_hr_df) <- header
# site_measurements.rds produced in Site-Analysis, contains all sites and corresponding measurements
sites_measurements <- readRDS(file = "data/sites_measurements.rds")
rainfall_sites <- sites_measurements %>%
filter(measurementname == "Rainfall") %>%
mutate(sitename = substring(site, 4)) %>%
left_join(rain_hr_df, by = "sitename") %>%
drop_na(total)
rainfall_sites
rain_hr_df
library(tidyverse)
library(hillr)
library(XML)
library(rvest)
library(lubridate)
library(plotly)
library(htmltools)
################################################################################
#
# Title: Rainfall Map Summary
# Author: Matt Ogden
# Description: This script joins the rainfall summary data and creates a map output,
# showing the total rainfall at the various rainfall sites.
#
################################################################################
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoibWF0dG9nZGVuIiwiYSI6ImNsNDNjY21jNDAxZmYzb3A4NWE2Y2M2cXEifQ.4vG7Zx9grk1z7R9LsDPeEA')
datatables_fp <- r"{\\tsrvfiles\hydrology\Datafiles\Data Tables}"
# Load RainHour
rain_hour <- "RainHour.htm"
latest_hr <- floor_date(now(), "1 hour")
x = c()
for (i in 0:23) {
x <- append(x, format(latest_hr - hours(i), format = "%H:%M"))
}
header = append(c("sitename", "total"), rev(x))
rain_hr_df <- read_html(paste0(datatables_fp, "\\", rain_hour)) %>%
html_table(fill = TRUE, header = FALSE) %>%
first()
names(rain_hr_df) <- header
# site_measurements.rds produced in Site-Analysis, contains all sites and corresponding measurements
sites_measurements <- readRDS(file = "data/sites_measurements.rds")
rainfall_sites <- sites_measurements %>%
filter(measurementname == "Rainfall") %>%
mutate(sitename = substring(site, 4)) %>%
left_join(rain_hr_df, by = "sitename") %>%
drop_na(total)
# Plot
styles <- schema()$layout$layoutAttributes$mapbox$style$values
style_buttons <- lapply(styles, function(s) {
list(
label = s,
method = "relayout",
args = list("mapbox.style", s)
)
})
p <- layout(
plot_mapbox(rainfall_sites) %>%
add_markers(
x = ~long,
y = ~lat,
size = ~total,
color = ~measurementname,
colors = c("blue"),
text = ~paste0(site, "\n Total rainfall last 24 hours: ", total, " mm")
),
mapbox = list(style = "basic",
center = list(lat = ~median(lat), lon = ~median(long)),
zoom = 7.8)
)
save_html(p, file = "outputs/rainfall_summary.html")
library(tidyverse)
library(lubridate)
library(readr)
# Load data ---------------------------
# Create site list and measurement list.
sites<-NULL
measurements<-NULL
sites$site<-c("HY Anatoki at Happy Sams", "HY Richmond Weather at TDC Roof")
measurements$measurements<-c("Rainfall")
# Set the time range for the requests
startDate <- "1/1/2020"
endDate <- "1/1/2022"
tss_url <- "http://envdata.tasman.govt.nz/data.hts?"
ls<-length(sites$site)
lm<-length(measurements$measurements)
output<-NULL
for (s in 1:ls) { # start the loop for sites
toutput<-NULL #create an empty dataframe for the temporary output (within the loop)
site<-sites$site[s] #select the site
for (m in 1:lm) {  #start of the loop for measurements
measurement<-measurements$measurements[m] #select the measurement
message(paste("Requesting", site, measurement))
#build the request
request <- paste("service=Hilltop&request=GetData&Site=", site, "&Measurement=", measurement, "&From=", startDate, sep="")
#get the xml data from the server
url<-paste(tss_url, request, sep="")
dataxml<-xmlParse(url)
#convert the xml into a dataframe of measurement results
#with basic error handling
data<-tryCatch({
hilltopMeasurement(dataxml)
}, error=function(err){message(paste("Error retrieving", site, measurement))})
toutput<-rbind(toutput,data) #append the data to the dataframe called toutput (temporary dataframe)
}
output<-rbind(output,toutput) #append the data to the dataframe called output
}
output
output <- readRDS(file="data/temp.rds")
saveRDS(output, file="data/temp.rds")
output <- readRDS(file="data/temp.rds")
library(tidyverse)
library(lubridate)
library(readr)
################################################################################
#
# Title: Rainfall Analysis
# Author: Matt Ogden
# Description: Load some rainfall data and
#
################################################################################
# Load data ---------------------------
# Create site list and measurement list.
sites<-NULL
measurements<-NULL
sites$site<-c("HY Anatoki at Happy Sams", "HY Richmond Weather at TDC Roof")
measurements$measurements<-c("Rainfall")
# Set the time range for the requests
startDate <- "1/1/2020"
endDate <- "1/1/2022"
tss_url <- "http://envdata.tasman.govt.nz/data.hts?"
ls<-length(sites$site)
lm<-length(measurements$measurements)
output<-NULL
for (s in 1:ls) { # start the loop for sites
toutput<-NULL #create an empty dataframe for the temporary output (within the loop)
site<-sites$site[s] #select the site
for (m in 1:lm) {  #start of the loop for measurements
measurement<-measurements$measurements[m] #select the measurement
message(paste("Requesting", site, measurement))
#build the request
request <- paste("service=Hilltop&request=GetData&Site=", site, "&Measurement=", measurement, "&From=", startDate, sep="")
#get the xml data from the server
url<-paste(tss_url, request, sep="")
dataxml<-xmlParse(url)
#convert the xml into a dataframe of measurement results
#with basic error handling
data<-tryCatch({
hilltopMeasurement(dataxml)
}, error=function(err){message(paste("Error retrieving", site, measurement))})
toutput<-rbind(toutput,data) #append the data to the dataframe called toutput (temporary dataframe)
}
output<-rbind(output,toutput) #append the data to the dataframe called output
}
saveRDS(output, file="data/temp.rds")
output <- readRDS(file="data/temp.rds")
# Transformations --------------------------
output[c("Time", "Value", "Site", "Measurement")]
colnames(output)
str(output)
df <- output %>%
mutate(
Time = as.POSIXct(output$Time, format="%Y-%m-%d %H:%M:%S"),
Value = as.double(Value),
Rainfall = Value
) %>%
subset(select = -Value)
df_anatoki <- subset(df, Site == "HY Anatoki at Happy Sams")
df_richmond_roof <- subset(df, site == "HY Richmond Weather at TDC Roof")
# Calculate Statistics ---------------------------
summary(df_anatoki$Rainfall)
summary(df_richmond_roof$Rainfall)
# A simple way of generating summary statistics by grouping variable is available in the psych packag
library(psych)
describeBy(df, "Site")
library(pastecs)
stat.desc(df_richmond_roof$Rainfall)
# Visualisatons ---------------------------
plot(df_anatoki$Time, df_anatoki$Rainfall, type="l", xlab="", ylab="Rainfall (mm)", sub="HY Anatoki at Happy Sams Rainfall")
# regroup by year using the aggregate function and plot
dates = format(df_anatoki$Time,"%Y")
annual_df <- aggregate(df_anatoki$Rainfall, by=list(dates), FUN=sum)
names(annual_df) = c("Year", "Rainfall")
annual_df$Year = as.factor(annual_df$Year)
library(ggplot2)
ggplot(annual_df, aes(x = Year, y = Rainfall))
ggplot(annual_df, aes(x=Year, y=Rainfall)) +
geom_bar(stat = "identity")
lm
for (s in sites$site) {
# start the loop for sites
toutput <- NULL #create an empty dataframe for the temporary output (within the loop)
for (m in measurements$measurements) {
#start of the loop for measurements
message(paste("Requesting", s, m))
#build the request
request <-
paste(
"service=Hilltop&request=GetData&Site=",
site,
"&Measurement=",
measurement,
"&From=",
startDate,
sep = ""
)
#get the xml data from the server
url <- paste(tss_url, request, sep = "")
dataxml <- xmlParse(url)
#convert the xml into a dataframe of measurement results
#with basic error handling
data <- tryCatch({
hilltopMeasurement(dataxml)
}, error = function(err) {
message(paste("Error retrieving", site, measurement))
})
toutput <-
rbind(toutput, data) #append the data to the dataframe called toutput (temporary dataframe)
}
output <-
rbind(output, toutput) #append the data to the dataframe called output
}
library(tidyverse)
library(lubridate)
library(readr)
library(Hilltop)
??hilltopMeasurement
library(rmarkdown)
site <- "HY Aorere at Salisbury Br"
rmarkdown::render(
"rating_analysis_output.Rmd",
output_file = paste(
"outputs/rating-analysis.",
Sys.Date(),
".",
site,
".html",
sep = ""
)
library(rmarkdown)
site <- "HY Aorere at Salisbury Br"
rmarkdown::render(
"rating_analysis_output.Rmd",
output_file = paste(
"outputs/rating-analysis.",
Sys.Date(),
".",
site,
".html",
sep = ""
)
)
site <- "HY Aorere at Salisbury Br"
library(rmarkdown)
site <- "HY Aorere at Salisbury Br"
rmarkdown::render(
"rainfall_report.Rmd",
output_file = paste(
"outputs/rainfall_report",
Sys.Date(),
".",
site,
".html",
sep = ""
)
)
getwd(())
getwd()
library(tidyverse)
library(lubridate)
library(Hilltop)
library(hillr)
library(plotly)
library(RODBC)
library(scales)
library(XML)
library(xml2)
library(httr)
# This script aims to replicate the webpage below.
# https://www.tasman.govt.nz/my-region/environment/environmental-data/rainfall/anatoki-at-happy-sams/
# Collections
url <- "http://envdata.tasman.govt.nz/data.hts?Service=Hilltop&Request=CollectionList"
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopServer")
as_tibble(as_list(read_xml(GET(url))))
as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopProject")
col <- as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopProject")
col$HilltopProject_id
col
col <- as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopProject") %>%
filter(HilltopServer_id == "Item") %>%
select(HilltopProject)  %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)
)
col <- as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopProject") %>%
filter(HilltopProject_id == "Item") %>%
select(HilltopProject)  %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
col
col <- as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopProject") %>%
filter(HilltopProject_id == "Item") %>%
select(HilltopProject)  %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
col
View(HilltopProject)
View(col)
col <- as_tibble(as_list(read_xml(GET(url)))) %>%
unnest_longer("HilltopProject") %>%
filter(HilltopProject_id == "Item") %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.)) %>%
unnest(cols = names(.))
col
as_tibble(as_list(read_xml(GET(url))))
??as_tibble
